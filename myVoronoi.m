function [V1,V2,IND,intV,vDepX,xGenV,B,BX,D1,D2] = myVoronoi(X,bounds,varargin)
%
% [V1,V2,IND,intV,vDepX,B,BX] = myVoronoi(X,varargin)
%
% Generate a voronoi diagram, vertices of the diagram, and the dependencies
% of each vertex on the points in X.
%
% INPUTS:
%
%   X: an array of coordinates having size (N,2) that will be used
%      to generate voronoi centers where N is the number of coordinates.
%
% OPTIONAL INPUTS:
%   myVoronoi(X,Bounds,'p')
%
%   Bounds: an array of size (1,2) that holds the lower and upper bounds
%           for the voronoi diagram.
%
%   'p'   : a character, used as an identifier to indicate whether or not to plot the
%           diagram generated. If 'p' is not specified, no plot will be
%           generated.
%
% OUTPUTS: 
%
%   V1: an array of size (2,M) of x coordinates for the edges in the voronoi
%       diagram. V1(1,:) is connected to V1(2,:)
%
%   V2: an array of size (2,M) of y coordinates for the edges in the voronoi
%       diagram. V2(1,:) is connected to V2(2,:)
%
%   IND:  a cell array that holds the vertices that are dependent on the
%       points in X.
%       i.e. C{i} = [3,5,7] => [V1(1,3),V2(1,3)],[V1(1,5),V2(1,5)],[V1(1,7),V2(1,7)]
%       are dependent on X(i,:).
%
%   intV: an array of size (K,2), where K is the number of interior
%         vertices in V3. The ith row of intV gives the x and y coordinates of
%         the ith interior vertex of the voronoi diagram.
%
%   vDepX: an array of size (K,3), where K is the number of interior vertices in V3,
%          whose rows are the indices of centers in X that generate a
%          vertex.
%   e.g.
%       if vDepX(i,:) = [1,6,8] then, intV(i,:) = [x_coord,y_coord] is
%       generated by X(1,:), X(6,:), X(8,:).
%
%
%   B: an array of size (b,3), where b is the number of boundary
%       coordinates. B(:,1) is an array containing the types, T, of
%       the boundary vertices. B(:,2:3) is an array containg the
%       coordinates of the boundary vertices.
%
%   BX: an array of size (b,2), where b is the number of boundary
%       coordinates, and the elements in each row correspond to the two
%       indices for points in X that generate the perpindicular bisector
%       that intersects the voronoi boundary at the points in B.
%
%   e.g. BX(i,:) = [j,k] such that the vector perpindicular to
%        [ X(j,:) - X(k,:) ] intersects the voronoi boundary at B(i,:)
%
%   Note: the ith edge in the voronoi diagram is represented by the vector
%          [V1(1,i) - V1(2,i) , V2(1,i) - V2(2,i)]
%
%   Note: (M is the number of edges in the voronoi diagram)  
%
%
%



% check if X is of appropriate size
if size(X,2) ~=2
   error('Input X must have size (N,2). Please reformat input.');
end

% compute the voronoi diagram and vertices for manipulation
[V1 ,V2] = voronoi(X(:,1),X(:,2));
[V3,C] = voronoin(X);

%fprintf('\n Lower bound for x and y: %d \n Upper bound for x and y: %d \n', bounds(1),bounds(2))
% Get correct coordinates for vertices on the boundary

%fprintf('findBounds time start:\n')
%tic
[V1,V2,B] = findBounds(X,V1,V2,bounds);
%toc

%fprintf('findBounds time end:\n\n')
% Get the pairs of centers in X that generate the boundary vertices
BB = B(:,2:3);
%fprintf('boundaryCenters time start:\n')
%tic
BX = boundaryCenters(X,BB);
%toc
%fprintf('boundaryCenters time end:\n\n')

if nargin > 2
    
    if nargin == 3 && varargin{1} == 'p'
        %fprintf('Plotting Time start:\n')
        %tic
        % make a box using the bounds given
        box_x = [bounds(2), bounds(2), bounds(1), bounds(1); bounds(2), bounds(1), bounds(1), bounds(2)];
        box_y = [bounds(2), bounds(1), bounds(1), bounds(2); bounds(1), bounds(1), bounds(2), bounds(2)];
        plot(box_x,box_y,'k');
        hold on;
        
        % Plot the new vertices and line segments
        P1 = [];
        P2 = [];
        for i = 1:size(V1,2)
            X_coord = [V1(:,i)',nan];
            Y_coord = [V2(:,i)',nan];
            P1 = [P1,X_coord];
            P2 = [P2,Y_coord];
        end
        plot(P1,P2,'b')
        hold on;
        plot(X(:,1),X(:,2),'k*');
        hold on;
        lims = [bounds(1) - 1, bounds(2) + 1];
        xlim(lims)
        ylim(lims)
        %toc
        %fprintf('Plotting Time start:\n\n')

    end 
end

[IND] = getDependentVertices(X,V1,V2,V3,C);
[intV, vDepX,xGenV] = intVDependsOnX(V3,C,bounds);
D1 = getDictionaryIntoV1(V1,V2,intV,bounds);
D2 = getDictionaryIntoV1(V1,V2,B(:,2:3),bounds);

end